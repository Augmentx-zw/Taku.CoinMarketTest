// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Taku.CoinMarketTest.Data;

#nullable disable

namespace Taku.CoinMarketTest.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Taku.CoinMarketTest.Data.Models.CryptoCoin", b =>
                {
                    b.Property<Guid>("CryptoCoinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Circulating_supply")
                        .HasColumnType("int");

                    b.Property<int>("Cmc_rank")
                        .HasColumnType("int");

                    b.Property<string>("CoinTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date_added")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Last_updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Max_supply")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Num_market_pairs")
                        .HasColumnType("int");

                    b.Property<string>("Platform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessedTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Self_reported_circulating_supply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Self_reported_market_cap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Total_supply")
                        .HasColumnType("int");

                    b.HasKey("CryptoCoinId");

                    b.ToTable("CryptoCoins");
                });

            modelBuilder.Entity("Taku.CoinMarketTest.Data.Models.Currency", b =>
                {
                    b.Property<Guid>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Fully_diluted_market_cap")
                        .HasColumnType("float");

                    b.Property<DateTime>("Last_updated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Market_cap")
                        .HasColumnType("float");

                    b.Property<int>("Market_cap_dominance")
                        .HasColumnType("int");

                    b.Property<double>("Percent_change_1h")
                        .HasColumnType("float");

                    b.Property<double>("Percent_change_24h")
                        .HasColumnType("float");

                    b.Property<double>("Percent_change_7d")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("QuoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Volume_24h")
                        .HasColumnType("int");

                    b.Property<double>("Volume_change_24h")
                        .HasColumnType("float");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Taku.CoinMarketTest.Data.Models.Quote", b =>
                {
                    b.Property<Guid>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CryptoCoinId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuoteId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("Taku.CoinMarketTest.Data.Models.Status", b =>
                {
                    b.Property<Guid>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Credit_count")
                        .HasColumnType("int");

                    b.Property<int>("Elapsed")
                        .HasColumnType("int");

                    b.Property<int>("Error_code")
                        .HasColumnType("int");

                    b.Property<string>("Error_message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");
                });
#pragma warning restore 612, 618
        }
    }
}
